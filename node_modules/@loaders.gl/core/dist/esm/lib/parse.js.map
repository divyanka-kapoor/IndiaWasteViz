{"version":3,"sources":["../../../src/lib/parse.js"],"names":["selectLoader","isLoaderObject","mergeLoaderAndUserOptions","getUrlFromData","parseWithLoader","parseWithLoaderInBatches","parseWithLoaderSync","parse","data","loaders","options","url","Array","isArray","autoUrl","loader","parseSync","parseInBatches","parseInBatchesSync"],"mappings":"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","sourcesContent":["import {selectLoader} from './select-loader';\nimport {isLoaderObject} from './loader-utils/normalize-loader';\nimport {mergeLoaderAndUserOptions} from './loader-utils/normalize-options';\nimport {getUrlFromData} from './loader-utils/get-data';\nimport {parseWithLoader, parseWithLoaderInBatches, parseWithLoaderSync} from './parse-with-loader';\n\nexport async function parse(data, loaders, options, url) {\n  // Signature: parse(data, options, url)\n  // Uses registered loaders\n  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  options = options || {};\n\n  // Extract a url for auto detection\n  const autoUrl = getUrlFromData(data, url);\n\n  // Chooses a loader and normalize it\n  const loader = selectLoader(loaders, autoUrl, data);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  return await parseWithLoader(data, loader, options, autoUrl);\n}\n\nexport function parseSync(data, loaders, options, url) {\n  // Signature: parseSync(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Chooses a loader and normalize it\n  const loader = selectLoader(loaders, url, data);\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  return parseWithLoaderSync(data, loader, options, url);\n}\n\nexport async function parseInBatches(data, loaders, options, url) {\n  // Signature: parseInBatches(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Chooses a loader and normalizes it\n  // TODO - only uses URL, need a selectLoader variant that peeks at first stream chunk...\n  const loader = selectLoader(loaders, url, null);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  return parseWithLoaderInBatches(data, loader, options, url);\n}\n\nexport async function parseInBatchesSync(data, loaders, options, url) {\n  // Signature: parseInBatchesSync(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Chooses a loader and normalizes it\n  // TODO - only uses URL, need a selectLoader variant that peeks at first stream chunk...\n  const loader = selectLoader(loaders, url, null);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  return parseWithLoaderInBatches(data, loader, options, url);\n}\n"],"file":"parse.js"}