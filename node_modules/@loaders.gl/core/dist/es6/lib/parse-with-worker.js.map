{"version":3,"sources":["../../../src/lib/parse-with-worker.js"],"names":["toArrayBuffer","WorkerFarm","parse","getTransferList","_workerFarm","getWorkerFarm","options","props","maxConcurrency","onDebug","onMessage","onWorkerMessage","setProps","worker","data","resolve","reject","type","result","arraybuffer","url","postMessage","id","error","message","parseWithWorker","workerSource","workerName","workerFarm","JSON","stringify","process","source"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,kCAA5B;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,SAAQC,KAAR,QAAoB,SAApB;AAEA,SAAQC,eAAR,QAA8B,8BAA9B;AAEA,IAAIC,WAAW,GAAG,IAAlB;;AAEA,SAASC,aAAT,CAAuBC,OAAO,GAAG,EAAjC,EAAqC;AACnC,QAAMC,KAAK,GAAG,EAAd;;AACA,MAAID,OAAO,CAACE,cAAZ,EAA4B;AAC1BD,IAAAA,KAAK,CAACC,cAAN,GAAuBF,OAAO,CAACE,cAA/B;AACD;;AACD,MAAIF,OAAO,CAACG,OAAZ,EAAqB;AACnBF,IAAAA,KAAK,CAACE,OAAN,GAAgBH,OAAO,CAACG,OAAxB;AACD;;AAEDL,EAAAA,WAAW,GACTA,WAAW,IACX,IAAIH,UAAJ,CAAe;AACbS,IAAAA,SAAS,EAAEC;AADE,GAAf,CAFF;;AAKAP,EAAAA,WAAW,CAACQ,QAAZ,CAAqBL,KAArB;;AAEA,SAAOH,WAAP;AACD;;AAED,eAAeO,eAAf,CAA+B;AAACE,EAAAA,MAAD;AAASC,EAAAA,IAAT;AAAeC,EAAAA,OAAf;AAAwBC,EAAAA;AAAxB,CAA/B,EAAgE;AAC9D,UAAQF,IAAI,CAACG,IAAb;AACE,SAAK,MAAL;AACEF,MAAAA,OAAO,CAACD,IAAI,CAACI,MAAN,CAAP;AACA;;AAEF,SAAK,SAAL;AACE,UAAI;AACF,cAAMA,MAAM,GAAG,MAAMhB,KAAK,CAACY,IAAI,CAACK,WAAN,EAAmBL,IAAI,CAACR,OAAxB,EAAiCQ,IAAI,CAACM,GAAtC,CAA1B;AACAP,QAAAA,MAAM,CAACQ,WAAP,CAAmB;AAACJ,UAAAA,IAAI,EAAE,cAAP;AAAuBK,UAAAA,EAAE,EAAER,IAAI,CAACQ,EAAhC;AAAoCJ,UAAAA;AAApC,SAAnB,EAAgEf,eAAe,CAACe,MAAD,CAA/E;AACD,OAHD,CAGE,OAAOK,KAAP,EAAc;AACdV,QAAAA,MAAM,CAACQ,WAAP,CAAmB;AAACJ,UAAAA,IAAI,EAAE,eAAP;AAAwBK,UAAAA,EAAE,EAAER,IAAI,CAACQ,EAAjC;AAAqCE,UAAAA,OAAO,EAAED,KAAK,CAACC;AAApD,SAAnB;AACD;;AACD;;AAEF,SAAK,OAAL;AACER,MAAAA,MAAM,CAACF,IAAI,CAACU,OAAN,CAAN;AACA;;AAEF;AAlBF;AAqBD;;AAMD,eAAe,SAASC,eAAT,CAAyBC,YAAzB,EAAuCC,UAAvC,EAAmDb,IAAnD,EAAyDR,OAAO,GAAG,EAAnE,EAAuE;AACpF,QAAMsB,UAAU,GAAGvB,aAAa,CAACC,OAAD,CAAhC;AAIAA,EAAAA,OAAO,GAAGuB,IAAI,CAAC3B,KAAL,CAAW2B,IAAI,CAACC,SAAL,CAAexB,OAAf,CAAX,CAAV;AAEA,SAAOsB,UAAU,CAACG,OAAX,CAAmBL,YAAnB,uBAA+CC,UAA/C,GAA6D;AAClER,IAAAA,WAAW,EAAEnB,aAAa,CAACc,IAAD,CADwC;AAElER,IAAAA,OAFkE;AAGlE0B,IAAAA,MAAM,EAAE,YAH0D;AAIlEf,IAAAA,IAAI,EAAE;AAJ4D,GAA7D,CAAP;AAMD","sourcesContent":["import {toArrayBuffer} from '../javascript-utils/binary-utils';\nimport WorkerFarm from '../worker-utils/worker-farm';\nimport {parse} from './parse';\n\nimport {getTransferList} from '../worker-utils/worker-utils';\n\nlet _workerFarm = null;\n\nfunction getWorkerFarm(options = {}) {\n  const props = {};\n  if (options.maxConcurrency) {\n    props.maxConcurrency = options.maxConcurrency;\n  }\n  if (options.onDebug) {\n    props.onDebug = options.onDebug;\n  }\n\n  _workerFarm =\n    _workerFarm ||\n    new WorkerFarm({\n      onMessage: onWorkerMessage\n    });\n  _workerFarm.setProps(props);\n\n  return _workerFarm;\n}\n\nasync function onWorkerMessage({worker, data, resolve, reject}) {\n  switch (data.type) {\n    case 'done':\n      resolve(data.result);\n      break;\n\n    case 'process':\n      try {\n        const result = await parse(data.arraybuffer, data.options, data.url);\n        worker.postMessage({type: 'process-done', id: data.id, result}, getTransferList(result));\n      } catch (error) {\n        worker.postMessage({type: 'process-error', id: data.id, message: error.message});\n      }\n      break;\n\n    case 'error':\n      reject(data.message);\n      break;\n\n    default:\n    // TODO - is this not an error case? Log a warning?\n  }\n}\n\n/**\n * this function expects that the worker function sends certain messages,\n * this can be automated if the worker is wrapper by a call to createWorker in @loaders.gl/loader-utils.\n */\nexport default function parseWithWorker(workerSource, workerName, data, options = {}) {\n  const workerFarm = getWorkerFarm(options);\n\n  // options.log object contains functions which cannot be transferred\n  // TODO - decide how to handle logging on workers\n  options = JSON.parse(JSON.stringify(options));\n\n  return workerFarm.process(workerSource, `loaders.gl-${workerName}`, {\n    arraybuffer: toArrayBuffer(data),\n    options,\n    source: 'loaders.gl', // Lets worker ignore unrelated messages\n    type: 'process' // For future extension\n  });\n}\n"],"file":"parse-with-worker.js"}