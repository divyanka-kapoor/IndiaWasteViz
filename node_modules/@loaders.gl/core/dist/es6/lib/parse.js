import { selectLoader } from './select-loader';
import { isLoaderObject } from './loader-utils/normalize-loader';
import { mergeLoaderAndUserOptions } from './loader-utils/normalize-options';
import { getUrlFromData } from './loader-utils/get-data';
import { parseWithLoader, parseWithLoaderInBatches, parseWithLoaderSync } from './parse-with-loader';
export async function parse(data, loaders, options, url) {
  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {
    url = options;
    options = loaders;
    loaders = null;
  }

  options = options || {};
  const autoUrl = getUrlFromData(data, url);
  const loader = selectLoader(loaders, autoUrl, data);
  options = mergeLoaderAndUserOptions(options, loader);
  return await parseWithLoader(data, loader, options, autoUrl);
}
export function parseSync(data, loaders, options, url) {
  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
    url = options;
    options = loaders;
    loaders = null;
  }

  const loader = selectLoader(loaders, url, data);

  if (!loader) {
    return null;
  }

  options = mergeLoaderAndUserOptions(options, loader);
  return parseWithLoaderSync(data, loader, options, url);
}
export async function parseInBatches(data, loaders, options, url) {
  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
    url = options;
    options = loaders;
    loaders = null;
  }

  const loader = selectLoader(loaders, url, null);
  options = mergeLoaderAndUserOptions(options, loader);
  return parseWithLoaderInBatches(data, loader, options, url);
}
export async function parseInBatchesSync(data, loaders, options, url) {
  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
    url = options;
    options = loaders;
    loaders = null;
  }

  const loader = selectLoader(loaders, url, null);
  options = mergeLoaderAndUserOptions(options, loader);
  return parseWithLoaderInBatches(data, loader, options, url);
}
//# sourceMappingURL=parse.js.map