import assert from '../utils/assert';
import parseWithWorker from './parse-with-worker';
import { getArrayBufferOrStringFromDataSync, getArrayBufferOrStringFromData, getAsyncIteratorFromData, getIteratorFromData } from './loader-utils/get-data';
export async function parseWithLoader(data, loader, options, url) {
  data = await getArrayBufferOrStringFromData(data, loader);

  if (loader.parseTextSync && typeof data === 'string') {
    options.dataType = 'text';
    return loader.parseTextSync(data, options, url, loader);
  }

  if (loader.parse) {
    return await loader.parse(data, options, url, loader);
  }

  if (loader.parseSync) {
    return loader.parseSync(data, options, url, loader);
  }

  if (loader.worker) {
    return await parseWithWorker(loader.worker, loader.name, data, options);
  }

  return assert(false);
}
export function parseWithLoaderSync(data, loader, options, url) {
  data = getArrayBufferOrStringFromDataSync(data, loader);

  if (loader.parseTextSync && typeof data === 'string') {
    return loader.parseTextSync(data, options, url, loader);
  }

  if (loader.parseSync) {
    return loader.parseSync(data, options, url, loader);
  }

  return assert(false);
}
export function parseWithLoaderInBatches(data, loader, options, url) {
  if (loader.parseInBatches) {
    const inputIterator = getAsyncIteratorFromData(data);
    const outputIterator = loader.parseInBatches(inputIterator, options, url, loader);
    return outputIterator;
  }

  return null;
}
export function parseWithLoaderInBatchesSync(data, loader, options, url) {
  if (loader.parseInBatchesSync) {
    const inputIterator = getIteratorFromData(data);
    const outputIterator = loader.parseInBatchesSync(inputIterator, options, url, loader, url);
    return outputIterator;
  }

  return assert(false);
}
//# sourceMappingURL=parse-with-loader.js.map