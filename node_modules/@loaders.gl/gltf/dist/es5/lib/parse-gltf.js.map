{"version":3,"sources":["../../../src/lib/parse-gltf.js"],"names":["DEFAULT_OPTIONS","fetchLinkedResources","fetchImages","createImages","fetch","fetchFile","decompress","DracoLoader","postProcess","log","console","isGLTF","arrayBuffer","options","dataView","DataView","byteOffset","parseGLTF","gltf","arrayBufferOrString","parseGLTFContainerSync","promises","promise","push","fetchBuffers","Promise","all","parseGLTFSync","fetchBuffersSync","decodeExtensions","data","uri","baseUri","ArrayBuffer","textDecoder","TextDecoder","decode","json","JSON","parse","_glb","buffers","Array","length","fill","hasBinChunk","binChunks","byteLength","images","i","buffer","warn","window","response","Error","image","fetchAndParseLinkedImage","resolve","reject","img","Image","crossOrigin","onload","onerror","error","src"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements, no-restricted-globals */\n/* global TextDecoder */\nimport {fetchFile} from '@loaders.gl/core';\nimport assert from './utils/assert';\nimport {getFullUri} from './gltf-utils/gltf-utils';\nimport {decodeExtensions, decodeExtensionsSync} from './extensions/extensions';\nimport parseGLBSync, {isGLB} from './parse-glb';\nimport postProcessGLTF from './post-process-gltf';\n\nconst DEFAULT_OPTIONS = {\n  fetchLinkedResources: true, // Fetch any linked .BIN buffers, decode base64\n  fetchImages: false, // Fetch any linked .BIN buffers, decode base64\n  createImages: false, // Create image objects\n  fetch: fetchFile,\n  decompress: false, // Decompress Draco compressed meshes (if DracoLoader available)\n  DracoLoader: null,\n  postProcess: false,\n  log: console // eslint-disable-line\n};\n\nexport function isGLTF(arrayBuffer, options = {}) {\n  const dataView = new DataView(arrayBuffer);\n  const byteOffset = 0;\n  return isGLB(dataView, byteOffset);\n}\n\nexport async function parseGLTF(gltf, arrayBufferOrString, byteOffset = 0, options = {}) {\n  options = {...DEFAULT_OPTIONS, ...options};\n\n  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n\n  const promises = [];\n\n  if (options.fetchImages) {\n    const promise = fetchImages(gltf, options);\n    promises.push(promise);\n  }\n\n  // Load linked buffers asynchronously and decodes base64 buffers in parallel\n  if (options.fetchLinkedResources) {\n    await fetchBuffers(gltf, options);\n  }\n\n  const promise = decodeExtensions(gltf, options);\n  promises.push(promise);\n\n  // Parallelize image loading and buffer loading/extension decoding\n  await Promise.all(promises);\n\n  // Post processing resolves indices to objects, buffers\n  return options.postProcess ? postProcessGLTF(gltf, options) : gltf;\n}\n\n// NOTE: The sync parser cannot handle linked assets or base64 encoded resources\n// gtlf - input can be arrayBuffer (GLB or UTF8 encoded JSON), string (JSON), or parsed JSON.\n// eslint-disable-next-line complexity\nexport function parseGLTFSync(gltf, arrayBufferOrString, byteOffset = 0, options = {}) {\n  options = {...DEFAULT_OPTIONS, ...options};\n\n  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n\n  // TODO: we could synchronously decode base64 encoded data URIs in this non-async path\n  if (options.fetchLinkedResources) {\n    fetchBuffersSync(gltf, options);\n  }\n\n  // Whether this is possible can depends on whether sync loaders are registered\n  // e.g. the `DracoWorkerLoader` cannot be called synchronously\n  if (options.decodeExtensions) {\n    decodeExtensionsSync(gltf, options);\n  }\n\n  // Post processing resolves indices to objects, buffers\n  return options.postProcess ? postProcessGLTF(gltf, options) : gltf;\n}\n\n// `data` - can be ArrayBuffer (GLB), ArrayBuffer (Binary JSON), String (JSON), or Object (parsed JSON)\nfunction parseGLTFContainerSync(gltf, data, byteOffset, options) {\n  // Initialize gltf container\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  // If data is binary and starting with magic bytes, assume binary JSON text, convert to string\n  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n\n  if (typeof data === 'string') {\n    // If string, try to parse as JSON\n    gltf.json = JSON.parse(data);\n  } else if (data instanceof ArrayBuffer) {\n    // If still ArrayBuffer, parse as GLB container\n    gltf._glb = {};\n    byteOffset = parseGLBSync(gltf._glb, data, byteOffset, options);\n    gltf.json = gltf._glb.json;\n  } else {\n    // Assume input is already parsed JSON\n    // TODO - should we throw instead?\n    gltf.json = data;\n  }\n\n  // Populate buffers\n  // Create an external buffers array to hold binary data\n  const buffers = gltf.json.buffers || [];\n  gltf.buffers = new Array(buffers.length).fill({});\n\n  // Populates JSON and some bin chunk info\n  if (gltf._glb && gltf._glb.hasBinChunk) {\n    gltf.buffers[0] = {\n      // TODO - standardize on `arrayBuffer`\n      arrayBuffer: gltf._glb.binChunks[0].arrayBuffer,\n      byteOffset: gltf._glb.binChunks[0].byteOffset,\n      byteLength: gltf._glb.binChunks[0].byteLength\n    };\n\n    gltf.json.buffers[0].data = gltf.buffers[0].arrayBuffer;\n    gltf.json.buffers[0].byteOffset = gltf.buffers[0].byteOffset;\n  }\n\n  // Populate images\n  const images = gltf.json.images || [];\n  gltf.images = new Array(images.length).fill({});\n}\n\n// Asynchronously fetch and parse buffers, store in buffers array outside of json\nasync function fetchBuffers(gltf, options) {\n  for (let i = 0; i < gltf.json.buffers.length; ++i) {\n    const buffer = gltf.json.buffers[i];\n    // TODO - remove this defensive hack and auto-infer the base URI\n    if (!options.uri) {\n      // eslint-disable-next-line\n      console.warn('options.uri must be set to decode embedded glTF buffers');\n    }\n    if (buffer.uri && options.uri) {\n      const fetch = options.fetch || window.fetch;\n      assert(fetch);\n      const uri = getFullUri(buffer.uri, options.uri);\n      const response = await fetch(uri);\n      const arrayBuffer = await response.arrayBuffer();\n\n      gltf.buffers[i] = {\n        arrayBuffer,\n        byteOffset: 0,\n        byteLength: arrayBuffer.byteLength\n      };\n\n      delete buffer.uri;\n    }\n  }\n}\n\nfunction fetchBuffersSync(gltf, options) {\n  for (const buffer of gltf.json.buffers || []) {\n    if (buffer.uri) {\n      throw new Error('parseGLTFSync: Cannot decode uri buffers');\n    }\n  }\n}\n\nasync function fetchImages(gltf, options) {\n  const images = gltf.json.images || [];\n\n  const promises = [];\n  for (let i = 0; i < images.length; ++i) {\n    const image = images[i];\n    if ('uri' in image) {\n      promises.push(fetchAndParseLinkedImage(gltf, image, i, options));\n    }\n  }\n  return await Promise.all(promises);\n}\n\n// Asynchronously fetches and parses one image, store in images array outside of json\nasync function fetchAndParseLinkedImage(gltf, image, i, options) {\n  const fetch = options.fetch || window.fetch;\n  assert(fetch);\n\n  /*\n  if (image.bufferView) {\n    gltf.images[i] = await new Promise(resolve => {\n      const arrayBufferView = this.getBufferView(image.bufferView);\n      const mimeType = image.mimeType || 'image/jpeg';\n      const blob = new Blob([arrayBufferView], { type: mimeType });\n      const urlCreator = self.URL || self.webkitURL;\n      const imageUrl = urlCreator.createObjectURL(blob);\n      const img = new Image();\n      img.onload = () => resolve(img);\n      img.src = imageUrl;\n    });\n  }\n  */\n\n  const uri = getFullUri(image.uri, options.uri);\n\n  // TODO - Call `parse` and use registered image loaders?\n  // const response = await fetch(uri);\n  // const arrayBuffer = await response.arrayBuffer();\n  // Create a new 'buffer' to hold the arrayBuffer?\n  // const image = parse(arrayBuffer);\n\n  gltf.images[i] = await new Promise((resolve, reject) => {\n    /* global Image */\n    const img = new Image();\n    img.crossOrigin = 'anonymous';\n    img.onload = () => resolve(img);\n    img.onerror = error => reject(error);\n    img.src = uri;\n  });\n}\n"],"file":"parse-gltf.js"}