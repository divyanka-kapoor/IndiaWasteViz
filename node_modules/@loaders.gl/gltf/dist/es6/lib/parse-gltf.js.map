{"version":3,"sources":["../../../src/lib/parse-gltf.js"],"names":["fetchFile","assert","getFullUri","decodeExtensions","decodeExtensionsSync","parseGLBSync","isGLB","postProcessGLTF","DEFAULT_OPTIONS","fetchLinkedResources","fetchImages","createImages","fetch","decompress","DracoLoader","postProcess","log","console","isGLTF","arrayBuffer","options","dataView","DataView","byteOffset","parseGLTF","gltf","arrayBufferOrString","parseGLTFContainerSync","promises","promise","push","fetchBuffers","Promise","all","parseGLTFSync","fetchBuffersSync","data","uri","baseUri","ArrayBuffer","textDecoder","TextDecoder","decode","json","JSON","parse","_glb","buffers","Array","length","fill","hasBinChunk","binChunks","byteLength","images","i","buffer","warn","window","response","Error","image","fetchAndParseLinkedImage","resolve","reject","img","Image","crossOrigin","onload","onerror","error","src"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements, no-restricted-globals */\n/* global TextDecoder */\nimport {fetchFile} from '@loaders.gl/core';\nimport assert from './utils/assert';\nimport {getFullUri} from './gltf-utils/gltf-utils';\nimport {decodeExtensions, decodeExtensionsSync} from './extensions/extensions';\nimport parseGLBSync, {isGLB} from './parse-glb';\nimport postProcessGLTF from './post-process-gltf';\n\nconst DEFAULT_OPTIONS = {\n  fetchLinkedResources: true, // Fetch any linked .BIN buffers, decode base64\n  fetchImages: false, // Fetch any linked .BIN buffers, decode base64\n  createImages: false, // Create image objects\n  fetch: fetchFile,\n  decompress: false, // Decompress Draco compressed meshes (if DracoLoader available)\n  DracoLoader: null,\n  postProcess: false,\n  log: console // eslint-disable-line\n};\n\nexport function isGLTF(arrayBuffer, options = {}) {\n  const dataView = new DataView(arrayBuffer);\n  const byteOffset = 0;\n  return isGLB(dataView, byteOffset);\n}\n\nexport async function parseGLTF(gltf, arrayBufferOrString, byteOffset = 0, options = {}) {\n  options = {...DEFAULT_OPTIONS, ...options};\n\n  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n\n  const promises = [];\n\n  if (options.fetchImages) {\n    const promise = fetchImages(gltf, options);\n    promises.push(promise);\n  }\n\n  // Load linked buffers asynchronously and decodes base64 buffers in parallel\n  if (options.fetchLinkedResources) {\n    await fetchBuffers(gltf, options);\n  }\n\n  const promise = decodeExtensions(gltf, options);\n  promises.push(promise);\n\n  // Parallelize image loading and buffer loading/extension decoding\n  await Promise.all(promises);\n\n  // Post processing resolves indices to objects, buffers\n  return options.postProcess ? postProcessGLTF(gltf, options) : gltf;\n}\n\n// NOTE: The sync parser cannot handle linked assets or base64 encoded resources\n// gtlf - input can be arrayBuffer (GLB or UTF8 encoded JSON), string (JSON), or parsed JSON.\n// eslint-disable-next-line complexity\nexport function parseGLTFSync(gltf, arrayBufferOrString, byteOffset = 0, options = {}) {\n  options = {...DEFAULT_OPTIONS, ...options};\n\n  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n\n  // TODO: we could synchronously decode base64 encoded data URIs in this non-async path\n  if (options.fetchLinkedResources) {\n    fetchBuffersSync(gltf, options);\n  }\n\n  // Whether this is possible can depends on whether sync loaders are registered\n  // e.g. the `DracoWorkerLoader` cannot be called synchronously\n  if (options.decodeExtensions) {\n    decodeExtensionsSync(gltf, options);\n  }\n\n  // Post processing resolves indices to objects, buffers\n  return options.postProcess ? postProcessGLTF(gltf, options) : gltf;\n}\n\n// `data` - can be ArrayBuffer (GLB), ArrayBuffer (Binary JSON), String (JSON), or Object (parsed JSON)\nfunction parseGLTFContainerSync(gltf, data, byteOffset, options) {\n  // Initialize gltf container\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  // If data is binary and starting with magic bytes, assume binary JSON text, convert to string\n  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n\n  if (typeof data === 'string') {\n    // If string, try to parse as JSON\n    gltf.json = JSON.parse(data);\n  } else if (data instanceof ArrayBuffer) {\n    // If still ArrayBuffer, parse as GLB container\n    gltf._glb = {};\n    byteOffset = parseGLBSync(gltf._glb, data, byteOffset, options);\n    gltf.json = gltf._glb.json;\n  } else {\n    // Assume input is already parsed JSON\n    // TODO - should we throw instead?\n    gltf.json = data;\n  }\n\n  // Populate buffers\n  // Create an external buffers array to hold binary data\n  const buffers = gltf.json.buffers || [];\n  gltf.buffers = new Array(buffers.length).fill({});\n\n  // Populates JSON and some bin chunk info\n  if (gltf._glb && gltf._glb.hasBinChunk) {\n    gltf.buffers[0] = {\n      // TODO - standardize on `arrayBuffer`\n      arrayBuffer: gltf._glb.binChunks[0].arrayBuffer,\n      byteOffset: gltf._glb.binChunks[0].byteOffset,\n      byteLength: gltf._glb.binChunks[0].byteLength\n    };\n\n    gltf.json.buffers[0].data = gltf.buffers[0].arrayBuffer;\n    gltf.json.buffers[0].byteOffset = gltf.buffers[0].byteOffset;\n  }\n\n  // Populate images\n  const images = gltf.json.images || [];\n  gltf.images = new Array(images.length).fill({});\n}\n\n// Asynchronously fetch and parse buffers, store in buffers array outside of json\nasync function fetchBuffers(gltf, options) {\n  for (let i = 0; i < gltf.json.buffers.length; ++i) {\n    const buffer = gltf.json.buffers[i];\n    // TODO - remove this defensive hack and auto-infer the base URI\n    if (!options.uri) {\n      // eslint-disable-next-line\n      console.warn('options.uri must be set to decode embedded glTF buffers');\n    }\n    if (buffer.uri && options.uri) {\n      const fetch = options.fetch || window.fetch;\n      assert(fetch);\n      const uri = getFullUri(buffer.uri, options.uri);\n      const response = await fetch(uri);\n      const arrayBuffer = await response.arrayBuffer();\n\n      gltf.buffers[i] = {\n        arrayBuffer,\n        byteOffset: 0,\n        byteLength: arrayBuffer.byteLength\n      };\n\n      delete buffer.uri;\n    }\n  }\n}\n\nfunction fetchBuffersSync(gltf, options) {\n  for (const buffer of gltf.json.buffers || []) {\n    if (buffer.uri) {\n      throw new Error('parseGLTFSync: Cannot decode uri buffers');\n    }\n  }\n}\n\nasync function fetchImages(gltf, options) {\n  const images = gltf.json.images || [];\n\n  const promises = [];\n  for (let i = 0; i < images.length; ++i) {\n    const image = images[i];\n    if ('uri' in image) {\n      promises.push(fetchAndParseLinkedImage(gltf, image, i, options));\n    }\n  }\n  return await Promise.all(promises);\n}\n\n// Asynchronously fetches and parses one image, store in images array outside of json\nasync function fetchAndParseLinkedImage(gltf, image, i, options) {\n  const fetch = options.fetch || window.fetch;\n  assert(fetch);\n\n  /*\n  if (image.bufferView) {\n    gltf.images[i] = await new Promise(resolve => {\n      const arrayBufferView = this.getBufferView(image.bufferView);\n      const mimeType = image.mimeType || 'image/jpeg';\n      const blob = new Blob([arrayBufferView], { type: mimeType });\n      const urlCreator = self.URL || self.webkitURL;\n      const imageUrl = urlCreator.createObjectURL(blob);\n      const img = new Image();\n      img.onload = () => resolve(img);\n      img.src = imageUrl;\n    });\n  }\n  */\n\n  const uri = getFullUri(image.uri, options.uri);\n\n  // TODO - Call `parse` and use registered image loaders?\n  // const response = await fetch(uri);\n  // const arrayBuffer = await response.arrayBuffer();\n  // Create a new 'buffer' to hold the arrayBuffer?\n  // const image = parse(arrayBuffer);\n\n  gltf.images[i] = await new Promise((resolve, reject) => {\n    /* global Image */\n    const img = new Image();\n    img.crossOrigin = 'anonymous';\n    img.onload = () => resolve(img);\n    img.onerror = error => reject(error);\n    img.src = uri;\n  });\n}\n"],"file":"parse-gltf.js"}